{
  "name": "resource",
  "version": "0.3.4",
  "description": "node.js resource",
  "main": "index.js",
  "dependencies": {
    "eventemitter2": "*",
    "node-uuid": "*",
    "colors": "*",
    "mkdirp": "~0.3.4",
    "which": "1.0.5",
    "async": "0.1.22"
  },
  "scripts": {
    "test": "tap test/"
  },
  "license": "MIT",
  "devDependencies": {
    "tap": "~0.3.3"
  },
  "readme": "# Resource engine\n\n## Installation\n\n```bash\nnpm install resource\n```\n\n## Define a new resource\n```js\nvar resource = require('resource'),\n    creature = resource.define('creature');\n```\n\n## Add resource properties\n\n```js\ncreature.property('title');\n```\n\n## Add resource properties with JSON-Schema\n\n```js\ncreature.property('type', { type: \"string\", enum: ['dragon', 'unicorn', 'pony'], default: \"dragon\"});\ncreature.property('life', { type: \"number\", default: 10 });\n```\n\n## Persisting resources to a datasource\n\n```js\n//\n// Can also persist to 'fs', 'mongo', 'couch', etc...\n//\ncreature.persist('memory');\n\ncreature.property('type');\n\ncreature.create({ id: 'bobby', type: 'dragon' }, function (err, result) {\n  console.log(err);\n  console.log(result.id);\n  console.log(result.type);\n});\n```\nEnabling persistence will also add: `creature.get`, `creature.destroy`, `creature.update`, `creature.find`, `creature.all`.\n\n## Adding resource methods\n\n```js\ncreature.method('poke', function () {\n  return 'poked';\n});\n```\n\n## Adding resource methods with JSON-Schema for arguments\n\n```js\nvar talk = function (text) {\n  var result = {\n    text: text\n  }\n  return result;\n}\ncreature.method('talk', talk, {\n  \"description\": \"echos back a string\",\n  \"properties\": {\n    \"text\": {\n      \"type\": \"string\",\n      \"default\": \"hello!\",\n      \"required\": true\n    }\n  }\n});\n```\n\n## Adding resource methods with complex JSON-Schema arguments\n\n```js\nvar fire = function (options, callback) {\n  var result = {\n    status: \"fired\",\n    direction: options.direction,\n    power: options.power\n  };\n  return callback(null, result);\n}\ncreature.method('fire', fire, { \n  \"description\": \"fires a lazer at a certain power and direction\",\n  \"properties\": {\n    \"options\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"power\": {\n          \"type\": \"number\",\n          \"default\": 1,\n          \"required\": true\n        },\n        \"direction\": {\n          \"type\": \"string\",\n          \"enum\": [\"up\", \"down\", \"left\", \"right\"],\n          \"required\": true,\n          \"default\": \"up\"\n        }\n      },\n      \"callback\": {\n        \"type\": \"function\",\n        \"required\": true\n      }\n    }\n}});\n```\n\n## Using resource.before() and resource.after() hooks\n\n```js\ncreature.persist('memory');\n\ncreature.before('create', function (data, next) {\n  console.log('before creature.create')\n  data.id += '-a';\n  next(null, data)\n});\n\ncreature.after('create', function (data, next) {\n  console.log('after creature.create')\n  data.foo = \"bar\";\n  next(null, data);\n});\n\ncreature.create({ id: 'bobby' }, function (err, result) {\n  console.log(err, result);\n  // OUTPUTS: null { id: 'bobby-a', foo: 'bar' }\n});\n```\n\n## Exporting a resource in a module\n\n```js\nexports.creature = creature;\n```\n\n## Setting NPM Dependencies in a resource\n\nUses same syntax as npm package.json\n\n```js\nexports.dependencies = {\n  \"colors\": \"*\"\n};\n```\n\n## Use resources in an application\n\n`resource.use()` intelligently loads resources and can lazily install required `npm` dependencies while deferring resource method invocation.\n\n```js\n//\n// resource.use() is the preferred way to load resources\n//\nvar resource = require('resource'),\ncreature = resource.use('creature');\n```\n\n```js\n//\n// node's built-in require() will also work,\n// but is not preferred over resource.use()\n//\nvar creature = require('./creature');\n```\n\n## Additional Resources\n\nAdditional resources are available at https://github.com/bigcompany/resources\n\n## Tests\n\n```\nnpm test\n```",
  "readmeFilename": "README.md",
  "_id": "resource@0.3.4",
  "dist": {
    "shasum": "cd7145ee2177f9b539dee36d5ee80c2d345a3700"
  },
  "_from": "resource@",
  "_resolved": "https://registry.npmjs.org/resource/-/resource-0.3.4.tgz"
}
